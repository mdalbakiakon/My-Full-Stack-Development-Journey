*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

html{
    width: 100%;
    height: 100%;
}

body{
    height: 100%;
    width: 100vw;
    display: flex;
    justify-content: center;
    align-items: center;
}

.container{
    width: 50vw;
    height: auto;
    border: 5px solid blueviolet;
    display: flex;
    flex-direction: column;
    /* grid-template-columns: 1fr 1fr; */
    /* place-content: center; */
    place-items: center;
    gap: 50px;
    perspective: 800px; /*! eeded to enable 3D visualization. The parent must have perspective set for 3D transforms like translateZ() to be visible.*/

    /* ! it means the viewer is seeing a 3d object from 800px distance */
}

.box{
    height: 80px;
    width: 80px;
    border: 4px solid black;
    background-color: yellowgreen;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
}

.box1{
    transform: rotate(0.125turn);
    /* 1 turn = 360deg */
    /* the rotation occur from the center point which means in circular motion */
}

.box2{
    /* Default transform origin are the center of the item but we can set them*/
    /* transform-origin: center; */
    /* transform-origin: top left; */
    /* transform-origin: 100% 0%;  */
    /* same as top left */
    /* transform-origin: 50px 100px; */
    /* from x axis and y axis */
    transform-origin: bottom center;
    transform: rotate(30deg);
}


.box3{
    /* transform: rotateX(50deg); */
    /* rotate in x axis aspect */
    /* transform: rotateY(50deg); */
    /* rotate in y axis aspect */
    transform: rotateZ(50deg);
    /* rotate in z axis */
}


.box4{
    /* transform: scale(1.5); */
    /* just in ration the scale will make the box look bigger or smaller */
    /* transform: scale(0); */
    /* scale 0 means it will be so small that we can not see it anymore */
    /* transform: scale(-1); */
    /*! it will make the box keep the size at it is but it will reverse the box for minus*/

    /* transform: scaleX(2); */
    /* only stretch in the x axis  */
    transform: scaleY(1.5);
    /* stretch in y axis */
}

.box5{
    /* skew is for slopping */
    /* ! we have to remember that - will slopp at the right in term of x axis */
    /* transform: skewX(20deg); */
    /* transform: skewX(-20deg); */
    transform: skewY(20deg);
    transform: skewX(20deg);
    transform: skew(20deg, 20deg);
    /* x axis, y axis if we both togethar like this! */
    /* !skew can not be applicable in Z axis */
}

.box6{
    /* transform: translateX(20px); */
    /* transform: translateY(20px); */
    /* transform: translateZ(500px); */
    /*! z is not working right?? because we have to enable the 3d aspect by default which is not enabled */

    transform-style: preserve-3d;
    /* ! now 3d will work */
    transform: translateZ(-500px);
    /* so it is like as if the box is far away */
}

.box7{
    /* multiple transform property */
    transform: translateX(100%) translateY(-80px) skewX(-25deg);
    /* by % it means of it's own height's perspective */
}

